service: perfsys-test-task

frameworkVersion: "3"

plugins:
  - serverless-python-requirements

package:
  patterns:
    - '!node_modules/**'
    - '!.idea/**'
    - '!README.md'
    - '!package.json'
    - '!package-lock.json'

custom:
  app_acronym: perfsys-task-github
  default_stage: test
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  dynamodb_table: ${self:custom.stack_name}
  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}
  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com
  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}
  s3_key_base: ${opt:s3_key_base, self:custom.stage}
  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}
  s3_role_resource: ${self:custom.s3_bucket_arn}/${self:custom.s3_key_base}/*
  url_default_ttl: 60

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}
    DYNAMODB_HOST: ${self:custom.dynamodb_host}
    REGION: ${self:custom.region}
    S3_BUCKET: ${self:custom.s3_bucket}
    S3_KEY_BASE: ${self:custom.s3_key_base}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
          Resource: ${self:custom.dynamodb_arn}
        - Effect: Allow
          Action:
            - textract:*
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:*
          Resource: ${self:custom.s3_role_resource}

functions:
  create:
    name: ${self:custom.stack_name}-create
    description: Generate a presigned URL for PUT upload
    handler: functions/create.create
    events:
      - http:
          path: files
          method: post
          cors: true
          integration: lambda

  bucket_trigger:
    handler: functions/bucket.event
    name: ${self:custom.stack_name}-bucket
    description: Called by s3 create event to manage file state in dynamo
    events:
      - s3:
          bucket: ${self:custom.s3_bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.s3_key_base}
      - s3:
          bucket: ${self:custom.s3_bucket}
          event: s3:ObjectRemoved:*
          rules:
            - prefix: ${self:custom.s3_key_base}

  get:
    handler: functions/get.get
    name: ${self:custom.stack_name}-get
    description: Get a textract for file <file-id>
    events:
      - http:
          path: files/{file_id}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
               paths:
                 file_id: true

  dynamo_stream:
    handler: functions/dynamo.event
    name: ${self:custom.stack_name}-dynamo
    description: Called by DynamoDB stream to make a callback on an url
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - filesDynamoDbTable
              - StreamArn
          batchSize: 1

resources:
  Resources:
    filesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.deletion_policy}
      Properties:
        AttributeDefinitions:
          -
            AttributeName: file_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: file_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamodb_table}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
